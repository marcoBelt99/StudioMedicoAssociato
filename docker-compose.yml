#version: '3.9'

services:

    db:
        image: postgres:alpine
        container_name: stud_med_ass_postgres_container
        ports: # 5429 e' la porta sul computer host. Qualunque applicazione che si collega a localhost:5429 sara' reindirizzata verso il contenitore
            - "5429:5432"  # 5432 porta interna del contenitore
        environment:
            POSTGRES_DB: sma_db # per ora faccio solo un esperimento
            # TODO: PostgreSQL supporta il passaggio delle password tramite segreti.
#            POSTGRES_USER: /run/secrets/postgres_user
#            POSTGRES_PASSWORD: /run/secrets/postgres_password
        #            POSTGRES_USER: ${POSTGRES_USER}
        #            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: mmsf22dp
        volumes:
#            - ./database/CREATE-INSERT-TANTE_PRENOTAZIONI_VISITE.sql:/docker-entrypoint-initdb.d/init.sql
            - ./src/main/resources/database/CREATE-INSERT-TANTE_PRENOTAZIONI_VISITE_PerContainer.sql:/docker-entrypoint-initdb.d/init.sql
            - postgres_data:/var/lib/postgresql/data # questa riga garantisce che i dati del database vengano salvati in un volume persistente chiamato postgres_data e non vengano persi tra i riavvii del contenitore
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U postgres" ] # se da problemi, al posto di $() mettere postgres
            interval: 10s # esegui il controllo per vedere se il container e' sano ogni 10s
            timeout: 5s # limita il timeout a 5s
            retries: 5 # fai 5 tentativi prima di considerarlo non sano
            #start_period: 15s # do tempo a PostgreSQL di inizializzare i dati
        secrets:
            - postgres_user
            - postgres_password
        networks:
            - stud_med_ass_network


    web:
        image: marcob99/stud_med_ass:latest  # questa sarà l'immagine pubblicata su Dockerhub da GitHub Actions
#       Procedimento vecchio: prima l'immagine era generata tramite build interna e locale,
#       (proprio come si vede qui sotto nelle 4 righe sotto questo commento).
#        Ora invece delego GitHub Actions a generarmi la mia immagine, sempre con il Dockerfile
#        Col nuovo procedimento (senza build:) l'utente non ha bisogno di buildare nulla.
#
#        image: stud_med_ass:latest # immagine che genero con il Dockerfile (qui in locale)
#        build:
#            context: .
#            dockerfile: Dockerfile
        container_name: stud_med_ass_webapp_container
        ports:
            - "8082:8082" # porta_host:porta_container
#        depends_on:
#            - db
        depends_on:
            db:
                condition: service_healthy
        environment:
#            SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/sma_db # 'db' (in ...//db:5432...) è il nome del servizio docker a cui l'app Spring Boot cerca di connettersi. 5432 e' la porta dentro il container
#            SPRING_DATASOURCE_USERNAME: /run/secrets/postgres_user # /run/secrets/postgres_user e' dentro il container
#            SPRING_DATASOURCE_PASSWORD: /run/secrets/postgres_password
            SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/sma_db
            SPRING_DATASOURCE_USERNAME: postgres
            SPRING_DATASOURCE_PASSWORD: mmsf22dp
        volumes:
            - ./target:/app/target  # TODO: Monta la cartella target dal sistema host al container
        secrets:
            - postgres_user
            - postgres_password
        networks:
            - stud_med_ass_network

networks:
    stud_med_ass_network:
        driver: bridge


volumes:
    postgres_data:


# TODO: in .gitignore includere la cartella ./secrets/*
secrets: 
  postgres_user:
    file: ./secrets/postgres_user.txt # questo file nel computer host presente in ./secrets/postgres_user.txt è mappato in automatico dentro al container in /run/secrets/postgres_user.txt
  postgres_password:
    file: ./secrets/postgres_password.txt
    